// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v5.28.0
// source: accounter/v1/accounter.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAccounterAdd = "/accounter.v1.Accounter/Add"

type AccounterHTTPServer interface {
	// Add Sends a greeting
	Add(context.Context, *AddRequest) (*AddReply, error)
}

func RegisterAccounterHTTPServer(s *http.Server, srv AccounterHTTPServer) {
	r := s.Route("/")
	r.POST("/Accounter", _Accounter_Add0_HTTP_Handler(srv))
}

func _Accounter_Add0_HTTP_Handler(srv AccounterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAccounterAdd)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Add(ctx, req.(*AddRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddReply)
		return ctx.Result(200, reply)
	}
}

type AccounterHTTPClient interface {
	Add(ctx context.Context, req *AddRequest, opts ...http.CallOption) (rsp *AddReply, err error)
}

type AccounterHTTPClientImpl struct {
	cc *http.Client
}

func NewAccounterHTTPClient(client *http.Client) AccounterHTTPClient {
	return &AccounterHTTPClientImpl{client}
}

func (c *AccounterHTTPClientImpl) Add(ctx context.Context, in *AddRequest, opts ...http.CallOption) (*AddReply, error) {
	var out AddReply
	pattern := "/Accounter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAccounterAdd))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
